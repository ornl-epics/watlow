#### Macro Definitions ####
# (s)	- Beam Line
# (ta)	- Target Area
# (ss)	- Device Name



#=========== Limits Menu ===========
# =========== Inputs
# Limits State
record(mbbi, "$(s):$(ta):$(ss):$(mod):LimitState") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_Lim_Enum_1.$(mod),2,0xFF,2000)UINT16")
	field(ZRST,	"Off")
	field(ZRVL,	"62")
	field(ONST,	"None")
	field(ONVL,	"61")
	field(TWST,	"Limit High")
	field(TWVL,	"51")
	field(THST,	"Limit Low")
	field(THVL,	"52")
	field(FRST,	"Error")
	field(FRVL,	"255")
	info(archive, "Monitor, 00:00:10, VAL")
}

# Limit Status
record(mbbi, "$(s):$(ta):$(ss):$(mod):LimitStatus") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_Lim_Enum_1.$(mod),16,0xFFFF,2000)INT32_BE")
	field(ZRST,	"Fail")
	field(ZRVL,	"32")
	field(ONST,	"Safe")
	field(ONVL,	"1667")
}

# Limit Output
record(mbbi, "$(s):$(ta):$(ss):$(mod):LimitOutput") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_Lim_Enum_1.$(mod),4,0xFFFF,2000)INT32_BE")
	field(ZRST,	"Off")
	field(ZRVL,	"62")
	field(ONST,	"On")
	field(ONVL,	"63")
}

# =========== From the Analog Database Inputs
# Must read this input to show the value the Limit is functioning on.
# Analog Input #
record(ai, "$(s):$(ta):$(ss):$(mod):AnalogInput2") 
{
	field(SCAN,	"1 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_AI_Num_1.$(mod),$(Ain=0),2000)FLOAT32_BE")
	field(EGU,	"°")
	field(PREC,	"3")
	field(ADEL,	"0.1")
	field(MDEL,	"0.1")
}


# =========== Read Backs
# Low Trip Setpoint
record(ai, "$(s):$(ta):$(ss):$(mod):LowTripSPRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_Lim_Num_1.$(mod),4,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(EGU,	"°")
	field(MDEL,	"0.1")
}

# High Trip Setpoint
record(ai, "$(s):$(ta):$(ss):$(mod):HighTripSPRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_Lim_Num_1.$(mod),6,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(EGU,	"°")
	field(MDEL,	"0.1")
}

# Limits Sides
record(mbbi, "$(s):$(ta):$(ss):$(mod):LimitSidesRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_Lim_Enum_1.$(mod),0,0xFF,2000)UINT16")
	field(ZRST,	"Both")
	field(ZRVL,	"13")
	field(ONST,	"High")
	field(ONVL,	"37")
	field(TWST,	"Low")
	field(TWVL,	"53")
}

# Limit Hysteresis
record(ai, "$(s):$(ta):$(ss):$(mod):LimitHysteresisRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_Lim_Num_1.$(mod),2,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(MDEL,	"0.1")
}

# Maximum Setpoint
record(ai, "$(s):$(ta):$(ss):$(mod):MaxLimitSPRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
##	Need method for dynamically defining the minimum and maximum limits based upon sample environment configuration
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_Lim_Num_1.$(mod),16,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(MDEL,	"0.1")
}

# Minimum Setpoint
record(ai, "$(s):$(ta):$(ss):$(mod):MinLimitSPRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_Lim_Num_1.$(mod),18,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(MDEL,	"0.1")
}

# Source Function A
record(mbbi, "$(s):$(ta):$(ss):$(mod):LimitSourceFnARB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_Lim_Enum_1.$(mod),20,0xFFFF,2000)INT32_BE")
	field(ZRST,	"None")
	field(ZRVL,	"61")
	field(ONST,	"Digital I/O")
	field(ONVL,	"1142")
	field(TWST,	"Function Key")
	field(TWVL,	"1001")
}

# Source Instance A
#record(ai, "$(s):$(ta):$(ss):$(mod):LimitSrcInstanceRB") 
#{
#	field(SCAN,	"1 second")
#	field(DTYP,	"asynInt32")
## No address defined in manual ##
#	field(INP,	"@asyn(watlow_Lim_Num_1.$(mod),750,2000)INT32_BE")
#}

# Limits Integrate
record(mbbi, "$(s):$(ta):$(ss):$(mod):LimitIntegrateRB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_Lim_Enum_1.$(mod),6,0xFFFF,2000)INT32_BE")
	field(ZRST,	"No")
	field(ZRVL,	"59")
	field(ONST,	"Yes")
	field(ONVL,	"106")
}


# =========== Outputs
# Process Clear Limit Error
record(bi, "$(s):$(ta):$(ss):$(mod):ClearLimitButton")
{
	field(DESC,	"Begins process to Clears Limit Errors")
	field(PINI,	"YES")
	field(VAL,	"0")
	field(ZNAM,	"Clear Error")
	field(ONAM,	"Clearing Error")
	field(ASG,	"ALWAYS")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):ClearLimitCalc PP")
}

record(calcout, "$(s):$(ta):$(ss):$(mod):ClearLimitCalc")
{
	field(INPA,	"$(s):$(ta):$(ss):$(mod):ClearLimitButton")
	field(CALC,	"A=1")
	field(DOPT,	"Use CALC")
	field(OOPT,	"Every Time")
	field(OUT,	"$(s):$(ta):$(ss):$(mod):ProcessClearLimit PP")
}


record(seq, "$(s):$(ta):$(ss):$(mod):ProcessClearLimit") 
{
	field(DOL1,	"0")
	field(LNK1,	"$(s):$(ta):$(ss):$(mod):ClearLimitError PP")
	field(DLY2,	"2")
	field(DOL2,	"255")
	field(LNK2,	"$(s):$(ta):$(ss):$(mod):ClearLimitError PP")
	field(DOL3,	"0")
	field(LNK3,	"$(s):$(ta):$(ss):$(mod):ClearLimitButton PP")
}


# Limit Clear Request
record(ao, "$(s):$(ta):$(ss):$(mod):ClearLimitError") 
{
	field(SCAN,	"Passive")
	field(DTYP,	"asynInt32")
	field(OUT,	"@asynMask(watlow.w.$(mod),720,0xFF,2000)UINT16")
}


# Low Trip Setpoint
record(ao, "$(s):$(ta):$(ss):$(mod):LowTripSP") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.$(mod),724,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(EGU,	"°")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):LowTripSPRB")
	info(autosaveFields,	"VAL")
}

# High Trip Setpoint
record(ao, "$(s):$(ta):$(ss):$(mod):HighTripSP") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.$(mod),726,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(EGU,	"°")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):HighTripSPRB")
	info(autosaveFields,	"VAL")
}

# Limits Sides
record(mbbo, "$(s):$(ta):$(ss):$(mod):LimitSides") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w.$(mod),728,0xFF,2000)UINT16")
	field(ZRST,	"Both")
	field(ZRVL,	"13")
	field(ONST,	"High")
	field(ONVL,	"37")
	field(TWST,	"Low")
	field(TWVL,	"53")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):LimitSidesRB")
	info(autosaveFields,	"VAL")
}

# Limit Hysteresis
record(ao, "$(s):$(ta):$(ss):$(mod):LimitHysteresis") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.$(mod),722,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):LimitHysteresisRB")
	info(autosaveFields,	"VAL")
}

# Maximum Setpoint
record(ao, "$(s):$(ta):$(ss):$(mod):MaxLimitSP") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
##	Need method for dynamically defining the minimum and maximum limits based upon sample environment configuration
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.$(mod),736,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(DRVL,	"-1999")
	field(DRVH,	"9999")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):MaxLimitSPRB")
	info(autosaveFields,	"VAL")
}

# Minimum Setpoint
record(ao, "$(s):$(ta):$(ss):$(mod):MinLimitSP") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.$(mod),738,2000)FLOAT32_BE")
	field(PREC,	"3")
	field(DRVL,	"-1999")
	field(DRVH,	"9999")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):MinLimitSPRB")
	info(autosaveFields,	"VAL")
}

# Source Function A
record(mbbo, "$(s):$(ta):$(ss):$(mod):LimitSourceFnA") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w.$(mod),748,0xFFFF,2000)INT32_BE")
	field(ZRST,	"None")
	field(ZRVL,	"61")
	field(ONST,	"Digital I/O")
	field(ONVL,	"1142")
	field(TWST,	"Function Key")
	field(TWVL,	"1001")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):LimitSourceFnARB")
}

# Source Instance A
#record(ao, "$(s):$(ta):$(ss):$(mod):LimitSrcInstance") 
#{
#	field(SCAN,	"Passive")
#	field(DTYP,	"asynInt32")
## No address defined in manual ##
#	field(OUT,	"@asyn(watlow.w.$(mod),750,2000)INT32_BE")
#	field(DRVL,	"1")
#	field(DRVH,	"12")
#}

# Limits Integrate
record(mbbo, "$(s):$(ta):$(ss):$(mod):LimitIntegrate") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w.$(mod),734,0xFFFF,2000)INT32_BE")
	field(ZRST,	"No")
	field(ZRVL,	"59")
	field(ONST,	"Yes")
	field(ONVL,	"106")
	field(FLNK,	"$(s):$(ta):$(ss):$(mod):LimitIntegrateRB")
	info(autosaveFields,	"VAL")
}



